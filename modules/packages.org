
First, let's set the package archives and do some basic tweaks.
#+begin_src emacs-lisp :tangle "yes"
  (require 'package)
  (setq package-enable-at-startup nil) ;; Speed tip taken from Doom Emacs
  (setq package-archives '(("ELPA" . "https://tromey.com/elpa/")
                           ("gnu" . "https://elpa.gnu.org/packages/")
                           ("melpa" . "https://melpa.org/packages/")))
  ;; General convieniences, somewhat questionable
  (setq url-http-attempt-keepalives nil)
  (setq package-check-signature nil)
#+end_src

We're going to use ~straight.el~ for package management.

#+begin_src emacs-lisp :tangle "yes"
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

This configuration also uses ~use-package~ for package management: it's a macro that'll make things much easier. All that's generally important to understand right now is that code after the ~:init~ keyword argument will be evaluated as the package is initialized, code after the ~:config~ keyword arg is lazy-loaded, the ~:bind~ and ~:hook~ keyword arguments are for specifying package-related keybinds and hooks respectively.

#+begin_src emacs-lisp :tangle "yes"
  (straight-use-package 'use-package)
  (eval-when-compile
    (require 'use-package))
  ;; Automatically install all packages with straight.el if not present.
  (setq straight-use-package-by-default t)
  ;; Always lazy-load if doable. TODO Properly look into good defer setup
  (setq use-package-always-defer t)
  (use-package general)
  (use-package projectile)
  (use-package s)
#+end_src

Are we using native-comp? If so, let's actually native compile things. Also, the popup compilation warnings are really bothersome, so turn those off, too.
#+begin_src emacs-lisp :tangle (if (string-match-p (regexp-quote "NATIVE_COMP") system-configuration-features) "yes" "no")
    (setq package-native-compile t)
    (setq comp-deferred-compilation t)
    (setq native-comp-deferred-compilation-deny-list nil)
    (setq warning-suppress-log-types '((comp)))
#+end_src

