
#+TITLE: Emacs
#+SUBTITLE: All of my Emacs and system config.

* Packages
First, let's set the package archives and do some basic tweaks.
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil) ;; Speed tip taken from Doom Emacs
  (setq package-archives '(("ELPA" . "https://tromey.com/elpa/")
			   ("gnu" . "https://elpa.gnu.org/packages/")
			   ("melpa" . "https://melpa.org/packages/")))
  ;; General convieniences, somewhat questionable
  (setq url-http-attempt-keepalives nil)
  (setq package-check-signature nil)
#+end_src

We're going to use ~straight.el~ for package management.
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
	 (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
	(bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

This configuration also uses ~use-package~ for package management: it's a macro that'll make things much easier. All that's generally important to understand right now is that code after the ~:init~ keyword argument will be evaluated as the package is initialized, code after the ~:config~ keyword arg is lazy-loaded, the ~:bind~ and ~:hook~ keyword arguments are for specifying package-related keybinds and hooks respectively.

#+begin_src emacs-lisp
  (straight-use-package 'use-package)
  (eval-when-compile
    (require 'use-package))
  ;; Automatically install all packages with straight.el if not present.
  (setq straight-use-package-by-default t)
  ;; Always lazy-load if doable. TODO Properly look into good defer setup
  (setq use-package-always-defer t)
  (use-package general)
  (use-package projectile)
  (use-package s)
#+end_src

Are we using native-comp? If so, let's actually native compile things. Also, the popup compilation warnings are really bothersome, so turn those off, too.
#+begin_src emacs-lisp :tangle (if (string-match-p (regexp-quote "NATIVE_COMP") system-configuration-features) "yes" "no")
    (setq package-native-compile t)
    (setq comp-deferred-compilation t)
    (setq native-comp-deferred-compilation-deny-list nil)
    (setq warning-suppress-log-types '((comp))))
#+end_src

* Speed
Let's then use a variety of the tips for speeding up initialization time given by the creator of Doom Emacs.
#+begin_src emacs-lisp
    ;; Go back to normal GC behavior after init
    (add-hook 'emacs-startup-hook
              (lambda ()
                (setq gc-cons-threshold 16777216 ; 16mb
                      gc-cons-percentage 0.1)))

    ;; Don't do GC when the minibuffer is being used (lag during minibuffer usage is frustrating)
    (defun doom-defer-garbage-collection-h ()
      "Disable garbage collection."
      (setq gc-cons-threshold most-positive-fixnum))

    (defun doom-restore-garbage-collection-h ()
      "Restore garbage collection."
      (run-at-time
       1 nil (lambda () (setq gc-cons-threshold 16777216))))

    (add-hook 'minibuffer-setup-hook #'doom-defer-garbage-collection-h)
    (add-hook 'minibuffer-exit-hook #'doom-restore-garbage-collection-h)
    ;; GCMH (literally Garbage Collector Magic Hack) optimizes GC calls?
    (use-package gcmh
      :init
      (setq gcmh-idle-delay 5)
      (setq gcmh-high-cons-threshold (* 16 1024 1024))
      (gcmh-mode))
#+end_src

* System
Let's now move on to system-level configuration. First, some utility functions for running commands and deducing distro/OS.

#+begin_src emacs-lisp
  (defun process-exit-code-and-output (program &rest args)
    "Run PROGRAM with ARGS and return the exit code and output in a list."
    (with-temp-buffer
      (list (apply 'call-process program nil (current-buffer) nil args)
            (buffer-string))))

  (defun get-distro-or-os ()
    "Return the Linux distribution or OS Emacs is running on."
    (if (eq system-type 'darwin)
        "Darwin"
      (when (eq system-type 'gnu/linux)
        (if (file-exists-p "/etc/os-release")
            (substring (shell-command-to-string "source /etc/os-release && echo $NAME") 0 -1)
          (substring (car (cdr (process-exit-code-and-output "uname" "-o"))) 0 -1)))))
#+end_src

Then, let's set up [[https://gitlab.com/jabranham/system-packages][system-packages]], an awesome package that lets you programmatically install packages from Emacs across operating systems.

#+begin_src emacs-lisp
  (use-package system-packages
    :init
    (let (os-name (get-distro-or-os))
      ;; system-packages doesn't support yay by default, so add it.
      (when (string= os-name "Arch Linux")
	    (add-to-list 'system-packages-supported-package-managers
			 '(yay .
			       ((default-sudo . nil)
				(install . "yay -S")
				(uninstall . "yay -Rs")
				(update . "yay -Syu")
				(log . "cat /var/log/pacman.log")
				(change-log . "yay -Qc")
				(clean-cache . "yay -Sc")
				(get-info . "yay -Qi")
				(get-info-remote . "yay -Si")
				(list-files-provided-by . "yay -Ql")
				(owning-file . "yay -Qo")
				(verify-all-dependencies . "yay -Dk")
				(remove-orphaned . "yay -Rsn $(pacman -Qtdq)")
				(list-installed-packages . "yay -Qe")
				(list-installed-packages-all . "yay -Q")
				(noconfirm . "--noconfirm"))))
	    (setq system-packages-package-manager 'yay))
      (when (string= os-name "Debian GNU/Linux")
	    (setq system-packages-use-sudo t)
	    (setq system-packages-package-manager 'apt))
      (if (string= os-name "Darwin")
	  (setq system-packages-package-manager 'brew)))
      (setq system-packages-noconfirm t))
#+end_src

This package also has some nice extensions like ~use-package-ensure-system-package~ which lets you express system-level dependencies for Emacs packages, and ~helm-system-packages~ which is the ultimate package manager interface (although it unfortunately means we'll need to install all of Helm for just this).

#+begin_src emacs-lisp
  (use-package use-package-ensure-system-package)
  (use-package helm-system-packages
    :commands (helm-system-packages))
#+end_src

* Desktop
It's time to load EXWM, the Emacs X Window Manager.

#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
  (use-package exwm
    :init
    (setq exwm-workspace-number 3)
    (setq exwm-input-global-keys
          `(([?\s-r] . exwm-reset)
            ([?\s-w] . exwm-workspace-switch)
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))))
    ;; Set default simulation keys
    (setq exwm-input-simulation-keys
          '(([?\C-b] . [left])
            ([?\C-f] . [right])
            ([?\C-p] . [up])
            ([?\C-n] . [down])
            ([?\C-a] . [home])
            ([?\C-e] . [end])
            ([?\M-v] . [prior])
            ([?\C-v] . [next])
            ([?\C-d] . [delete])
            ([?\C-k] . [S-end delete])))
    ;; Allow windows to be moved across screens and interacted with normally.
    (setq exwm-layout-show-all-buffers t)
    (setq exwm-workspace-show-all-buffers t)
    (exwm-enable))
#+end_src

Setting up multi-monitor support is a bit of a hack in my configuration since my input devices tend to mysteriously swap around. You'll notice I'm using ~use-package~ for the same package twice in a row here, but fear not, it merely executes them sequentially and it means I can intersperse long-winded package configuration with text without fear of accidentally breaking something one day.

#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
  (use-package exwm
    :init
    (defvar left-screen "DP-1")
    (defvar middle-screen "HDMI-0")
    (defvar right-screen "DP-3")
    (require 'exwm-randr)
    (setq exwm-randr-workspace-output-plist `(0 ,middle-screen 1 ,left-screen 2 ,right-screen))
    (add-hook 'exwm-randr-screen-change-hook
	      (lambda ()
		(start-process-shell-command
		 "xrandr" nil (concat "xrandr --output " left-screen
				      " --output " middle-screen
				      " --output " right-screen
				      " --auto"))))
    (exwm-randr-enable)
    (add-hook 'exwm-init-hook
	      (lambda ()
		(start-process-shell-command
		 "xrandr" nil (concat "xrandr --output " left-screen " --rotate left")))))
#+end_src

Next, if we're on Linux, let's do everything we need to do at startup.

~xmodmap~ lets you modify the keys, so let's make things a lot nicer for Emacs.
#+begin_src sh :tangle (if (eq system-type 'gnu/linux) "~/.config/X/Xmodmap" "no")
  # Clear things
  clear      lock
  clear   control
  clear      mod1
  clear      mod2
  clear      mod3
  clear      mod4
  clear      mod5
  keycode      37 = Hyper_L # Control -> Hyper
  keycode      66 = Control_L # Caps -> Control
  # Escape trickery to allow xcape? TODO Figure out what I meant to do by this
  keycode       9 = Escape
  keycode  0xffca = Escape
  add     control = Control_L Control_R
  add        mod1 = Alt_L Alt_R Meta_L
  add        mod2 = Num_Lock
  add        mod3 = Hyper_L
  add        mod4 = Super_L Super_R
  add        mod5 = Mode_switch ISO_Level3_Shift
#+end_src

~xbindkeys~ allows for customizing system-wide keybinds which can be useful when you're in a pickle. Most of this is legacy config from back before I started using EXWM.
#+begin_src sh :tangle (if (eq system-type 'gnu/linux) "~/.xbindkeysrc" "no") 
  # -*- shell-script -*-
  # TODO Phase me out!

  # Increase volume
  "amixer set Master 5%+"
  XF86AudioRaiseVolume

  # Decrease volume
  "amixer set Master 5%-"
  XF86AudioLowerVolume

  "amixer set Master toggle"
  XF86AudioMute

  "bash ~/.config/rofi/applets/menu/screenshot.sh"
  Print

  "bash ~/.config/rofi/applets/menu/powermenu.sh"
  Pause

  "bash ~/.config/rofi/applets/menu/apps.sh"
  Scroll_Lock

  "bash ~/.config/rofi/launchers/text/launcher.sh"
  alt + p

  "bash ~/.config/rofi/launchers/ribbon/launcher.sh"
  alt + shift + p

  "sh ~/.config/focus.sh"
  alt + shift + f

  "python ~/.config/modeset.py 'normal'"
  m:0x20 + c:37 + F1

  "rofi -show calc -modi calc -no-show-match -no-sort"
  XF86Calculator
#+end_src

~xcape~ allows for "dual-function" keys that can act as one key when held down, and another when tapped. It's niche but useful. We'll remap tapping left-shift and right-shift to left and right parentheses respectively, as well as remap tapping caps-lock to escape.
#+begin_src sh :tangle (if (eq system-type 'gnu/linux) "~/.config/X/xcape.sh" "no")
xcape -e "Control_L=Escape"
xcape -e "Shift_R=parenright"
xcape -e "Shift_L=parenleft"
#+end_src

~dunst~ is a great notification server.
#+begin_src conf :tangle (if (eq system-type 'gnu/linux) "~/.config/dunst/dunstrc" "no")
  [global]
  monitor = 0
  follow = keyboard
  geometry = "320x20-36+36"
  indicate_hidden = yes
  shrink = yes
  transparency = 0
  notification_height = 0
  separator_height = 0
  padding = 8
  horizontal_padding = 8
  frame_width = 2
  frame_color = "#000000"
  separator_color = frame
  sort = yes
  idle_threshold = 120
  font = IBM Plex Mono 10
  line_height = 0
  markup = full
  format = "<b>%s</b>\n<i>%b</i>"
  alignment = left
  show_age_threshold = 60
  word_wrap = yes
  ellipsize = middle
  ignore_newline = no
  stack_duplicates = true
  hide_duplicate_count = false
  show_indicators = false
  icon_position = left
  max_icon_size = 32
  icon_path = /usr/share/icons/candy-icons/apps/scalable:/usr/share/icons/candy-icons/devices/scalable/
  sticky_history = yes
  history_length = 20
  dmenu = /usr/bin/dmenu -p dunst:
  browser = /usr/bin/firefox -new-tab
  always_run_script = true
  title = Dunst
  class = Dunst
  startup_notification = false
  verbosity = mesg
  corner_radius = 0
  force_xinerama = false
  mouse_left_click = close_current
  mouse_middle_click = do_action
  mouse_right_click = close_all

  [experimental]
  per_monitor_dpi = false

  [shortcuts]
  close = ctrl+space
  close_all = ctrl+shift+space
  history = ctrl+grave
  context = ctrl+shift+grave

  [urgency_low]
  foreground = "#ffd5cd"
  background = "#121212"
  frame_color = "#a2c5de"
  timeout = 10
  icon = ~/.config/dunst/images/notification.png

  [urgency_normal]
  background = "#121212"
  foreground = "#ffd5cd"
  frame_color = "#a2c5de"
  timeout = 10
  icon = ~/.config/dunst/images/notification.png

  [urgency_critical]
  background = "#121212"
  foreground = "#ffd5cd"
  frame_color = "#a2c5de"
  timeout = 0
  icon = ~/.config/dunst/images/alert.png
#+end_src

Let's define a quick script to reload it based on pywal, too.
#+begin_src sh :tangle (if (eq system-type 'gnu/linux) "~/.config/dunst/reload_dunst.sh" "no")
  . "${HOME}/.cache/wal/colors.sh"

  pkill dunst
  dunst \
        -frame_width 2 \
            -lb "${color0}" \
            -nb "${color0}" \
            -cb "${color0}" \
            -lf "${color7}" \
            -bf "${color7}" \
            -cf "${color7}" \
            -nf "${color7}" \
        -frame_color "${color2}" &
#+end_src

~picom~ is a nice compositor, and will allow us to have effects like rounded corners and transparency if we want them. Dual kawase blur looks very nice, so let's use it.
#+begin_src conf :tangle (if (eq system-type 'gnu/linux) "~/.config/picom.conf" "no")
backend = "glx";
blur: {
      method = "dual_kawase";
      strength = 10;
      background = false;
      background-frame = false;
      background-fixed = false;
}
#+end_src

Finally, we actually run the startup.
#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no") 
  (use-package exwm
    :ensure-system-package (xbindkeys xcape dunst flameshot unclutter polybar feh picom)
    :init
    ;; Rebind keys
    (call-process-shell-command "xmodmap ~/.config/X/Xmodmap" nil 0)
    (call-process-shell-command "xbindkeys" nil 0)
    (call-process-shell-command "sh ~/.config/X/xcape.sh" nil 0)
    ;; Notifications w/ dunst
    (call-process-shell-command "dunst &" nil 0)
    (call-process-shell-command "sh ~/.config/dunst/reload_dunst.sh" nil 0)
    ;; Make mouse vanish when not used
    (call-process-shell-command "unclutter &" nil 0)
    ;; The best screenshot utility!
    (call-process-shell-command "flameshot &" nil 0)
    ;; Compositor
    (call-process-shell-command "picom &" nil 0))
#+end_src

Let's make moving across monitors and workspaces a little easier.
#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no") 
   (defun exwm-workspace-next ()
     (interactive)
     (if (< exwm-workspace-current-index (- exwm-workspace-number 1))
         (exwm-workspace-switch (+ exwm-workspace-current-index 1))))

   (defun exwm-workspace-prev ()
     (interactive)
     (if (> exwm-workspace-current-index 0)
         (exwm-workspace-switch (- exwm-workspace-current-index 1))))

   (general-define-key
    "M-h" 'exwm-workspace-next
    "M-l" 'exwm-workspace-prev)

   ;; Make mouse follow focus
   (use-package exwm-mff
     :init (exwm-mff-mode))

   (use-package exwmsw
     :straight (exwmsw :type git :host github :repo "Lemonbreezes/exwmsw"
                       :fork (:host github :repo "richardfeynmanrocks/exwmsw"))
     :init
     (setq exwmsw-active-workspace-plist `(,middle-screen 0 ,right-screen 0 ,left-screen 0))
     (setq exwmsw-the-right-screen right-screen)
     (setq exwmsw-the-center-screen middle-screen)
     (setq exwmsw-the-left-screen left-screen)
     :general
     (override-global-map
               "C-M-j" #'exwmsw-cycle-screens
               "C-M-k" #'exwmsw-cycle-screens-backward)
     (exwm-mode-map ;; HACK
       "C-M-j" #'exwmsw-cycle-screens
       "C-M-k" #'exwmsw-cycle-screens-backward))
 #+end_src

Then, make it so EXWM buffer names contain part of the the window title based off [[https://www.reddit.com/r/emacs/comments/mb8u1m/weekly_tipstricketc_thread/gs55kqw?utm_source=share&utm_medium=web2x&context=3][this great tip]] from [[https://www.reddit.com/r/emacs][r/emacs]].
#+begin_src emacs-lisp
  (use-package exwm
    :init

    (defun b3n-exwm-set-buffer-name ()
      (if (and exwm-title (string-match "\\`http[^ ]+" exwm-title))
          (let ((url (match-string 0 exwm-title)))
            (setq-local buffer-file-name url)
            (setq-local exwm-title (replace-regexp-in-string
                                    (concat (regexp-quote url) " - ")
                                    ""
                                    exwm-title))))
      (setq-local exwm-title
                  (concat
                   exwm-class-name
                   "<"
                   (if (<= (length exwm-title) 50)
                       exwm-title
                     (concat (substring exwm-title 0 50) "…"))
                   ">"))

      (exwm-workspace-rename-buffer exwm-title))

    (add-hook 'exwm-update-class-hook 'b3n-exwm-set-buffer-name)
    (add-hook 'exwm-update-title-hook 'b3n-exwm-set-buffer-name))
#+end_src

Finally, update polybar config file to match monitor and make it so we have decorative gaps around all of EXWM (not individual buffers/windows unfortunately).
#+begin_src emacs-lisp :tangle (if (eq system-type 'gnu/linux) "yes" "no")
   ;; TODO Use Org Babel and tangle polybar config?
   (start-process-shell-command "polybar-update" nil
       (concat "sed s/<MONITOR>/"
	       middle-screen
	       "/g -i ~/.config/polybar/config.ini.bak > ~/.config/polybar/config.ini"))

   (use-package exwm-outer-gaps
     :straight (exmw-outer-gaps :type git :host github :repo "lucasgruss/exwm-outer-gaps")
     :hook (exwm-init . (lambda () (exwm-outer-gaps-mode))))

   (use-package exwm
     :hook (exwm-init .
	(lambda () (call-process-shell-command "bash ~/.config/polybar/launch.sh --docky" nil 0))))
#+end_src

* External Programs
~pywal~ will be our savior for theming by allowing for thematic consistency.
#+begin_src emacs-lisp
  ;; (use-package exwm
  ;;   :ensure-system-package python-pywal)
#+end_src

~kitty~ is a terminal emulator that's featureful and usable.
#+begin_src conf :tangle ~/.config/kitty/kitty.conf
  include ~/.cache/wal/colors-kitty.conf # import pywal theme
  font_family IBM Plex Mono
  # breathing room
  window_padding_width 10 15
  # make page up/down do things
  map page_up scroll_page_up
  map page_down scroll_page_down
  # sane text size binds
  map ctrl+shift+equal change_font_size all +2.0
  map ctrl+shift+plus change_font_size all +2.0
  map ctrl+shift+kp_add change_font_size all +2.0
  initial_window_width 1000
  initial_window_height 400
#+end_src

~zsh~ is good.
#+begin_src sh :tangle (if (eq system-type 'gnu/linux) "~/.zshrc" "no") 
  # p10k instant prompt
  if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
    source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
  fi

  export PATH=$PATH:$HOME/.local/bin/:$HOME/.cargo/bin/

  export ZSH="$HOME/.oh-my-zsh"

  ZSH_THEME="powerlevel10k/powerlevel10k"

  plugins=(git)

  source $ZSH/oh-my-zsh.sh

  export EDITOR='emacs'

  # Aliases
  alias ydl="youtube-dl --extract-audio --audio-format mp3 -o '%(title)s.%(ext)s'"
  alias neofetch="neofetch --ascii ~/.config/neofetch/arch.ascii"
  alias gs="git status"
  alias nano=mg
  alias ls=exa --icons
  alias hexdump=hexyl
  alias cat=bat
  alias rm=rip
  alias gcc="gcc -Wall -Werror -pedantic-errors"
  alias g++="g++ -Wall -Weffc++ -Werror -pedantic-errors"

  function recompile() {
      cd ~/.config/$1
      sudo make clean install &> /dev/null
      cd -
  }

  function fix_titles() {
      for a in *
      id3v2 -t ${a%.mp3} $a
  }

  function themeage() {
      wal -i $1 &> /dev/null
      xdotool key alt+r &> /dev/null
      emacsclient --eval "(load-theme 'ewal-doom-one)" &> /dev/null
      /home/quantumish/.local/bin/pywalfox update
      python ~/test.py colors-wal-dwm2.h
      python ~/test.py colors-wal-dmenu2.h
      python ~/test.py zathurarc
      python ~/test.py colors-vis
      recompile dmenu
  }

  # To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
  [[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh
  source  /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
  source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh
#+end_src

#+begin_src sh :tangle (if (eq system-type 'darwin) "~/.zshrc" "no")
export PATH=$PATH:$HOME/.local/bin/:$HOME/.cargo/bin/

export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="lambdamod"

plugins=(git zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

export EDITOR='emacs'

alias gs="git status"
alias nano=mg
alias gcc="gcc -Wall -Werror -pedantic-errors"
alias g++="g++ -Wall -Weffc++ -Werror -pedantic-errors"
#+end_src


It is clearly of top priority to ensure the Arch logo in ~neofetch~ looks good.
#+begin_src text :tangle ~/.config/neofetch/arch.ascii
${c1}
                   ▄
                  ▟█▙
                 ▟███▙
                ▟█████▙
               ▟███████▙
              ▂▔▀▜██████▙
             ▟██▅▂▝▜█████▙
            ▟█████████████▙
           ▟███████████████▙
          ▟█████████████████▙
         ▟███████████████████▙
        ▟█████████▛▀▀▜████████▙
       ▟████████▛      ▜███████▙
      ▟█████████        ████████▙
     ▟██████████        █████▆▅▄▃▂
    ▟██████████▛        ▜█████████▙
   ▟██████▀▀▀              ▀▀██████▙
  ▟███▀▘                       ▝▀███▙
 ▟▛▀                               ▀▜▙

#+end_src

Let's configure ~neofetch~ while we're at it.
#+begin_src sh :tangle ~/.config/neofetch/config.conf
  print_info() {
      info title
      info underline
      info "OS" distro
      info "Host" model
      info "Kernel" kernel
      info "Uptime" uptime
      info "Packages" packages
      info "Shell" shell
      info "DE" de
      info "WM" wm
      info "Terminal" term
      info "CPU" cpu
      info "GPU" gpu
      info "Memory" memory
      info cols
  }

  title_fqdn="off"
  kernel_shorthand="on"
  distro_shorthand="off"
  os_arch="on"
  uptime_shorthand="on"
  memory_percent="off"
  memory_unit="mib"
  package_managers="on"
  shell_path="off"
  shell_version="on"
  speed_type="bios_limit"
  speed_shorthand="off"
  cpu_brand="on"
  cpu_speed="on"
  cpu_cores="logical"
  cpu_temp="off"
  gpu_brand="on"
  gpu_type="all"
  refresh_rate="off"
  gtk_shorthand="off"
  gtk2="on"
  gtk3="on"
  public_ip_host="http://ident.me"
  public_ip_timeout=2
  de_version="on"
  disk_show=('/')
  disk_subtitle="mount"
  disk_percent="on"
  music_player="auto"
  song_format="%artist% - %album% - %title%"
  song_shorthand="off"
  mpc_args=()
  colors=(distro)
  bold="on"
  underline_enabled="on"
  underline_char="-"
  separator=":"
  block_range=(0 15)
  color_blocks="on"
  block_width=3
  block_height=1
  col_offset="auto"
  bar_char_elapsed="-"
  bar_char_total="="
  bar_border="on"
  bar_length=15
  bar_color_elapsed="distro"
  bar_color_total="distro"
  cpu_display="off"
  memory_display="off"
  battery_display="off"
  disk_display="off"
  image_backend="ascii"
  image_source="auto"
  ascii_distro="auto"
  ascii_colors=(distro)
  ascii_bold="on"
  image_loop="off"
  thumbnail_dir="${XDG_CACHE_HOME:-${HOME}/.cache}/thumbnails/neofetch"
  crop_mode="normal"
  crop_offset="center"
  image_size="auto"
  gap=3
  yoffset=0
  xoffset=0
  background_color=
  stdout="off"
#+end_src

Firefox could be prettier.
#+begin_src emacs-lisp
  ;; (use-package exwm
  ;;   :ensure-system-package (firefox python-pywalfox))
#+end_src
#+begin_src css 
  #TabsToolbar {visibility: collapse;}
  #statuspanel[type="overLink"] #statuspanel-label {
      display:none!important;
  }
#+end_src

* Undoing Defaults
Emacs has some default behaviors that are generally annoying. Let's disable them!

#+begin_src emacs-lisp
  ;; Turn off all unnecessary GUI elements.
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)

  ;; Unless something is actively exploding, I do not care.
  (setq warning-minimum-level :emergency)

  ;; customize is the worst.
  (setq custom-file "/dev/null")
  (setq package-selected-packages "/dev/null/")

  ;; These keybinds suspend Emacs (in order to mimic terminal behavior).
  ;; This has *only* caused me trouble in GUI Emacs.
  (when (display-graphic-p)
    (global-unset-key (kbd "C-z"))
    (global-unset-key (kbd "C-x C-z")))

  ;; Stop making backup files everywhere, put them all in one place!
  (setq backup-directory-alist `(("." . "~/.saves")))
  (setq backup-by-copying t)

  ;; Stop Emacs from bothering you about disabled commands.
  (setq disabled-command-function nil)

  ;; Prevent any attempts to resize the frame.
  (setq frame-inhibit-implied-resize t)

  ;; Stop Emacs from trying to use dialog boxes.
  (setq use-dialog-box nil)

  ;; Prefer y/n over yes/no.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Mouse behavior tweaks? TODO look into me
  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1) ((control) . nil)))
  (setq mouse-wheel-progressive-speed nil)

  ;; Visual line mode is just better.
  (global-visual-line-mode)
#+end_src

* TODO Theming
  #+begin_src emacs-lisp
    ;; TODO: Set up treemacs.

    (use-package hide-mode-line)

    (use-package doom-themes
      :init
      ;; Global settings (defaults)
      (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
            doom-themes-enable-italic t) ; if nil, italics is universally disabled

      (doom-themes-visual-bell-config)

      ;(setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
      ;(doom-themes-treemacs-config)
      (doom-themes-org-config))

    (use-package ewal)
    (use-package ewal-doom-themes
      :init
      (load-theme 'ewal-doom-one t))

    (use-package doom-modeline
      :init
      (setq doom-modeline-height 40)
      (setq doom-modeline-buffer-encoding nil)
      (doom-modeline-mode))

    ;; TODO: Contextual solaire
    (use-package solaire-mode
      :init
      (solaire-global-mode))

    (use-package centaur-tabs
      :init
      (setq centaur-tabs-height 16)
      (setq centaur-tabs-style "bar")
      (setq centaur-tabs-set-icons t)
      (setq centaur-tabs-icon-scale-factor 0.7)
      (setq centaur-tabs-set-bar 'left)
      (setq x-underline-at-descent-line t)
      (defun contextual-tabs ()
            (interactive)
            (if (and (centaur-tabs-mode-on-p) (eq (derived-mode-p 'prog-mode) nil))
                    (centaur-tabs-local-mode)))
      (defun centaur-tabs-hide-tab (x)
            (let ((name (format "%s" x)))
              (or
               (window-dedicated-p (selected-window))
               (string-match-p (regexp-quote "<") name)
               (string-prefix-p "*lsp" name)
               (string-prefix-p "*Compile-Log*" name)
               (string-prefix-p "*company" name)
               (string-prefix-p "*compilation" name)
               (string-prefix-p "*Help" name)
               (string-prefix-p "*straight" name)
               (string-prefix-p "*Flycheck" name)
               (string-prefix-p "*tramp" name)
               (string-prefix-p "*help" name)
               (and (string-prefix-p "magit" name)
                            (not (file-name-extension name)))
               )))
      (defun centaur-tabs-hide-tab-cached (x) (centaur-tabs-hide-tab x))
      (centaur-tabs-mode)
      :hook
      (after-change-major-mode . contextual-tabs)
      :bind
      ("H-l" . 'centaur-tabs-forward-tab)
      ("H-h" . 'centaur-tabs-backward-tab))

    (use-package treemacs
      :after doom-themes
      :init
      (doom-themes-treemacs-config)
      (setq doom-themes-treemacs-theme "doom-colors")
      (setq treemacs-width 30)
      :bind
      ("C-c t" . treemacs))

    (use-package treemacs-all-the-icons
      :after treemacs
      :init
      (treemacs-load-theme "all-the-icons"))

    (use-package olivetti
      :hook (prog-mode . (lambda () (olivetti-mode))))
  #+end_src
** Translucent
Transparency can look nice - sometimes. Polybar clashes with transparency, so disable it while we're using it.
#+begin_src emacs-lisp
  ;; FIXME hacky and broken
  (define-minor-mode translucent-mode
    "Make the current frame slightly transparent and don't use polybar."
    nil
    :global t
    (if translucent-mode
        (set-frame-parameter (selected-frame) 'alpha '(100))
      (set-frame-parameter (selected-frame) 'alpha '(90))))
#+end_src

* TODO Dashboard
#+begin_src emacs-lisp

  (use-package dashboard
    :straight (emacs-dashboard :type git :host github :repo "emacs-dashboard/emacs-dashboard"
                      :fork (:host github :repo "richardfeynmanrocks/emacs-dashboard"))
    :init
    (setq dashboard-center-content t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-projects-backend 'projectile)
    (setq dashboard-footer-messages '("The One True Editor!"
                                      "Protocol 3: Protect the Pilot"
                                      "All systems nominal."
                                      "Democracy... is non negotiable."
                                      "It's my way or... hell, it's my way!"
                                      "Make life rue the day it though it could give Richard Stallman lemons!"
                                      "Vi-Vi-Vi, the editor of the beast."
                                      "Happy hacking!"
                                      "While any text editor can save your files, only Emacs can save your soul."
                                      "There's an Emacs package for that."
                                      "Rip and tear, until it is done!"
                                      "It's time to kick ass and chew bubblegum... and I'm all outta gum."
                                      "M-x butterfly"
                                      ""))
    (setq dashboard-items '((recents  . 3)
                            (projects . 3)
                            (agenda . 5)))
    (setq dashboard-startup-banner "~/Downloads/firewatch-logo.png")
    (setq dashboard-image-banner-max-height 250)
    (setq dashboard-image-banner-max-width 250)

    (setq dashboard-set-init-info nil)
    ;; (setq dashboard-set-navigator nil)
    ;; ;; Format: "(icon title help action face prefix suffix)"
    ;; (setq dashboard-navigator-buttons
    ;; 	`(;; line1
    ;;         ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
    ;;           "Homepage"
    ;;           "Browse homepage"
    ;;           (lambda (&rest _) (browse-url "homepage")))
    ;;          ("★" "Star" "Show stars" (lambda (&rest _) (show-stars)) warning)
    ;;          ("?" "" "?/h" #'show-help nil "<" ">"))
    ;;         ;; line 2
    ;;         ((,(all-the-icons-faicon "linkedin" :height 1.1 :v-adjust 0.0)
    ;;           "Linkedin"
    ;;           ""
    ;;           (lambda (&rest _) (browse-url "homepage")))
    ;;          ("⚑" nil "Show flags" (lambda (&rest _) (message "flag")) error))))
    (setq dashboard-page-separator "\n\n")
    (dashboard-setup-startup-hook)
    :hook
    (dashboard-mode . hide-mode-line-mode)
    (dashboard-mode . turn-off-solaire-mode))
#+end_src
  
* Minibuffer Completion
Next, let's improve interactions with Emacs: things like finding files, running commands, switching buffers, etc... by using ~ivy~, a light(ish) minibuffer completion system. Ivy is one of the more popular packages for this, meaning that there's quite a bit of integration with other packages. Notably, ~counsel~ extends its functionality and ~swiper~ provides a nicer interface to interactive search.

On top of this, ~prescient~ allows for completions to be even more useful by basing them off of history and sorting them better. Finally, we can add some icons and extra text to make it all prettier.

#+begin_src emacs-lisp
  (use-package prescient
    :init (setq prescient-persist-mode t))

  (use-package ivy
    :init
    (use-package counsel :config (counsel-mode 1))
    (use-package swiper :defer t)
    (ivy-mode 1)
    :bind
    (("C-s"     . swiper-isearch)
     ("M-x"     . counsel-M-x)
     ("C-x C-f" . counsel-find-file)))

  (use-package ivy-rich
    :after ivy
    :init (ivy-rich-mode))

  (use-package all-the-icons-ivy-rich
    :after ivy-rich counsel
    :init (all-the-icons-ivy-rich-mode))

  (use-package ivy-prescient
    :after ivy prescient
    :init (ivy-prescient-mode))

  (use-package marginalia
    :config (marginalia-mode))
#+end_src

* Help
In order to make some parts of exploring Emacs slightly nicer, let's install ~helpful~ which overhauls the Help interface, and ~which-key~ which helps you discover keybinds.

#+begin_src emacs-lisp
  (use-package helpful
    :init
    ;; Advise describe-style functions so that Helpful appears no matter what
    (advice-add 'describe-function :override #'helpful-function)
    (advice-add 'describe-variable :override #'helpful-variable)
    (advice-add 'describe-command :override #'helpful-callable)
    (advice-add 'describe-key :override #'helpful-key)
    (advice-add 'describe-symbol :override #'helpful-symbol)
    :config
    ;; Baseline keybindings, not very opinionated
    (global-set-key (kbd "C-h f") #'helpful-callable)
    (global-set-key (kbd "C-h v") #'helpful-variable)
    (global-set-key (kbd "C-h k") #'helpful-key)
    (global-set-key (kbd "C-c C-d") #'helpful-at-point)
    (global-set-key (kbd "C-h F") #'helpful-function)
    (global-set-key (kbd "C-h C") #'helpful-command)
    ;; Counsel integration
    (setq counsel-describe-function-function #'helpful-callable)
    (setq counsel-describe-variable-function #'helpful-variable))

  (use-package which-key
    :init (which-key-mode))
#+end_src

* TODO Perspectives
* TODO Movement
  #+begin_src emacs-lisp
(use-package zygospore
  :bind ("M-m" . 'zygospore-toggle-delete-other-windows))

(defun opposite-other-window ()
  "Cycle buffers in the opposite direction."
  (interactive)
  (other-window -1))

(general-def 'override-global-map
 "M-k" 'other-window
 "M-j" 'opposite-other-window)

(general-def 'exwm-mode-map
 "M-k" 'other-window
 "M-j" 'opposite-other-window)
  #+end_src
* TODO Org
First, let's set up the basics.
#+begin_src emacs-lisp
  (use-package org
    :init
    (setq org-todo-keywords '((sequence "TODO(t)" "WAIT(w)" "|" "DONE(d)" "NOPE(n)")))
    (setq org-modules (append org-modules '(org-habit org-id)))  )
#+end_src

** Aesthetics
Let's add aesthetics for normal prose-style Org usage.
#+begin_src emacs-lisp
  (use-package org
    :config
    (setq org-fontify-quote-and-verse-blocks t)
    (setq org-fontify-emphasized-text t)
    (setq org-hide-emphasis-markers t)
    (setq org-ellipsis " ")
    (setq org-hide-leading-stars t)
    (set-face-attribute 'org-document-title nil
                        :height 2.0
                        :weight 'bold)
    :hook (org-mode . org-indent-mode))
#+end_src

There are a variety of useful packages that make Org look nicer:
#+begin_src emacs-lisp
  (setq org-latex-create-formula-image-program 'dvisvgm)
  ;; Smart mixing of variable pitch and monospace
  ;; This is preferred over `mixed-pitch` because of small details
  (use-package org-variable-pitch
    :init (org-variable-pitch-setup))
  
  ;; Better headline icons
  (use-package org-superstar
    :config
    (setq org-superstar-headline-bullets-list '("◉" "○" "◈" "◎"))
    :hook (org-mode . org-superstar-mode))
  
  ;; Auto-toggle emphasis
  (use-package org-appear
    :straight (:host github :repo "awth13/org-appear")
    :hook (org-mode . org-appear-mode))
  
  ;; Auto-toggle LaTeX rendering
  (use-package org-fragtog
    :hook (org-mode . org-fragtog-mode))
  
  ;; Natural bulleted lists
  (use-package org-autolist
    :hook (org-mode . org-autolist-mode))
  
  ;; Centering w/ Olivetti
  (use-package olivetti
    :hook (org-mode . (lambda () (interactive) (olivetti-mode) (olivetti-set-width 100))))
#+end_src

*** Icons
 #+begin_src emacs-lisp
   (use-package org
     :config
     (defun magic-icon-fix ()
       (let ((fontset (face-attribute 'default :fontset)))
         (set-fontset-font fontset '(?\xf000 . ?\xf2ff) "FontAwesome" nil 'append)))  
     :hook
     (org-mode . (lambda () (interactive)
           (setq prettify-symbols-alist '(("[#A]" . "")
                                          ("[#B]" . "")
                                          ("[#C]" . "")
                                          ("[ ]" . "")
                                          ("[X]" . "")
                                          ("[-]" . "")
                                          ("#+begin_src" . "")
                                          ("#+end_src" . "―")
                                          ("#+begin_collapsible" . "")
                                          ("#+end_collapsible" . "")
                                          (":PROPERTIES:" . "\n")
                                          (":END:" . "―")
                                          ("#+STARTUP:" . "")
                                          ("#+TITLE: " . "")
                                          ("#+title: " . "")
                                          ("#+RESULTS:" . "")
                                          ("#+NAME:" . "")
                                          ("#+ROAM_TAGS:" . "")
                                          ("#+FILETAGS:" . "")
                                          ("#+HTML_HEAD:" . "")
                                          ("#+SUBTITLE:" . "")
                                          ("#+AUTHOR:" . "")
                                          (":Effort:" . "")
                                          ("SCHEDULED:" . "")
                                          ("DEADLINE:" . "")))
           (prettify-symbols-mode)
           (let ((fontset (face-attribute 'default :fontset)))
             (set-fontset-font fontset '(?\xf000 . ?\xf2ff) "FontAwesome" nil 'append)))))  
 #+end_src

*** Property Drawers
#+begin_src emacs-lisp
  (defun org-cycle-hide-drawers (state)
    "Re-hide all drawers after a visibility state change."
    (when (and (derived-mode-p 'org-mode)
                           (not (memq state '(overview folded contents))))
          (save-excursion
            (let* ((globalp (memq state '(contents all)))
                           (beg (if globalp
                                          (point-min)
                                          (point)))
                           (end (if globalp
                                          (point-max)
                                          (if (eq state 'children)
                                            (save-excursion
                                                  (outline-next-heading)
                                                  (point))
                                            (org-end-of-subtree t)))))
                  (goto-char beg)
                  (while (re-search-forward org-drawer-regexp end t)
                    (save-excursion
                          (beginning-of-line 1)
                          (when (looking-at org-drawer-regexp)
                            (let* ((start (1- (match-beginning 0)))
                                           (limit
                                             (save-excursion
                                                   (outline-next-heading)
                                                     (point)))
                                           (msg (format
                                                          (concat
                                                            "org-cycle-hide-drawers:  "
                                                            "`:END:`"
                                                            " line missing at position %s")
                                                          (1+ start))))
                                  (if (re-search-forward "^[ \t]*:END:" limit t)
                                    (outline-flag-region start (point-at-eol) t)
                                    (user-error msg))))))))))
   (add-hook 'org-mode-hook (lambda () (org-cycle-hide-drawers 'all)))
#+end_src

*** Extras
 #+begin_src emacs-lisp
   ;; Google Docs style comments
   (use-package org-marginalia
     :straight (:host github :repo "nobiot/org-marginalia")
     :init (add-hook 'org-mode-hook 'org-marginalia-mode)
     (defun org-marginalia-save-and-open (point)
       (interactive "d")
       (org-marginalia-save)
       (org-marginalia-open point))
     :bind (:map org-marginalia-mode-map
                 ("C-c n o" . org-marginalia-save-and-open)
                 ("C-c m" . org-marginalia-mark)
                 ("C-c n ]" . org-marginalia-next)
                 ("C-c n [" . org-marginalia-prev)))
 #+end_src

** Projects
   #+begin_src emacs-lisp
     (use-package org
       :init
       (setq org-enforce-todo-dependencies t)
       (setq org-enforce-todo-checkbox-dependencies t)
       (setq org-agenda-dim-blocked-tasks t))
   #+end_src

** Notes
  #+begin_src emacs-lisp
    (use-package org-roam
      :init
      (setq org-roam-directory "~/sync/notes")
      (setq org-roam-v2-ack t)
      :bind
      ("C-c n i" . org-roam-node-insert)
      ("C-c n f" . org-roam-node-find))

    (use-package org-roam-ui
      :straight
      (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      ;; :hook (after-init . org-roam-ui-mode)
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-roam-ui-open-on-start t))

    (use-package xeft
      :straight
      (:host github :repo "casouri/xeft"))
   #+end_src

** Export
  #+begin_src emacs-lisp
    (use-package org-special-block-extras
      :init
      (org-special-block-extras-mode)
      (org-special-block-extras-defblock collapsible (title "Details") (contents "")
                                         (format
                                          (pcase backend     
                                            (_ "<details>
                                           <summary> <i> %s </i> </summary>
                                           %s
                                        </details>"))
                                          title contents)))
    
    (use-package org
      :init
      (setq org-html-text-markup-alist
            '((bold . "<b>%s</b>")
              (code . "<code>%s</code>")
              (italic . "<i>%s</i>")
              (strike-through . "<del>%s</del>")
              (underline . "<span class=\"underline\">%s</span>")
              (verbatim . "<kbd>%s</kbd>")))
      (setq org-html-head "<link rel=\"stylesheet\" href=\"https://quantumish.github.io/org.css\">")
      (setq org-html-postamble nil)
      (setq org-export-with-section-numbers nil)
      (setq org-export-with-toc nil)
      (setq org-publish-project-alist
            '(("github.io"
               :base-directory "~/Dropbox/publicnotes/"
               :base-extension "org"
               :publishing-directory "~/richardfeynmanrocks.github.io/notes/"
               :recursive t
               :publishing-function org-html-publish-to-html
               :headline-levels 4
               :html-extension "html"
               :with-toc nil
               :section-numbers nil
               :html-head "<link rel=\"stylesheet\" href=\"https://richardfeynmanrocks.github.io/org.css\">"
               :preserve-breaks t
       ))))
  #+end_src
   
* Terminal
  #+begin_src emacs-lisp
 (use-package vterm)
  #+end_src

  #+begin_src emacs-lisp
	 (defun dw/get-prompt-path ()
	  (let* ((current-path (eshell/pwd))
		 (git-output (shell-command-to-string "git rev-parse --show-toplevel"))
		 (has-path (not (string-match "^fatal" git-output))))
	    (if (not has-path)
	      (abbreviate-file-name current-path)
	      (string-remove-prefix (file-name-directory git-output) current-path))))

	;; This prompt function mostly replicates my custom zsh prompt setup
	;; that is powered by github.com/denysdovhan/spaceship-prompt.

    (defun dw/eshell-prompt ()  
	  (concat
	   "\n"
	   (propertize "davfrei" 'face `(:foreground "#C62D43") 'read-only t)
	   (propertize " " 'face `(:foreground "white") 'read-only t)
	   (propertize (dw/get-prompt-path) 'face `(:foreground "#FD7446") 'read-only t)
	   (propertize " · " 'face `(:foreground "white") 'read-only t)
	   (propertize (format-time-string "%I:%M:%S %p") 'face `(:foreground "#F1BCA3") 'read-only t)
	   (if (= (user-uid) 0)
	       (propertize "\n#" 'face `(:foreground "red2") 'read-only t)
	     (propertize "\nλ" 'face `(:foreground "#F98859") 'read-only t))
	   (propertize " " 'face `(:foreground "#f6e5db"))
	   ))

	(defun dw/eshell-configure ()
	  (use-package xterm-color)

	  (push 'eshell-tramp eshell-modules-list)
	  (push 'xterm-color-filter eshell-preoutput-filter-functions)
	  (delq 'eshell-handle-ansi-color eshell-output-filter-functions)

	  ;; Save command history when commands are entered
	  (add-hook 'eshell-pre-command-hook 'eshell-save-some-history)

	  (add-hook 'eshell-before-prompt-hook
		    (lambda ()
		      (setq xterm-color-preserve-properties t)))

	  ;; Truncate buffer for performance
	  (add-to-list 'eshell-output-filter-functions 'eshell-truncate-buffer)

	  ;; We want to use xterm-256color when running interactive commands
	  ;; in eshell but not during other times when we might be launching
	  ;; a shell command to gather its output.
	  (add-hook 'eshell-pre-command-hook
		    (lambda () (setenv "TERM" "xterm-256color")))
	  (add-hook 'eshell-post-command-hook
		    (lambda () (setenv "TERM" "dumb")))

	  ;; Use completion-at-point to provide completions in eshell
	  (define-key eshell-mode-map (kbd "<tab>") 'completion-at-point)

	  ;; Initialize the shell history
	  (eshell-hist-initialize)

	  (setenv "PAGER" "cat")

	  (setq eshell-prompt-function      'dw/eshell-prompt
		eshell-prompt-regexp        "^λ " 
		eshell-history-size         10000
		eshell-buffer-maximum-lines 10000
		eshell-hist-ignoredups t
		eshell-highlight-prompt t
		eshell-scroll-to-bottom-on-input t
		eshell-prefer-lisp-functions nil))

	(use-package eshell
	  :hook (eshell-first-time-mode . dw/eshell-configure)
	  :init
	  (setq eshell-directory-name "~/.dotfiles/.emacs.d/eshell/"
		eshell-aliases-file (expand-file-name "~/.dotfiles/.emacs.d/eshell/alias")))

	(use-package eshell-z
	  :hook ((eshell-mode . (lambda () (require 'eshell-z)))
		 (eshell-z-change-dir .  (lambda () (eshell/pushd (eshell/pwd))))))

	(use-package exec-path-from-shell
	  :init
	  (setq exec-path-from-shell-check-startup-files nil)
	  :config
	  (when (memq window-system '(mac ns x))
	    (exec-path-from-shell-initialize)))

	(setq eshell-prompt-function 'dw/eshell-prompt)

	(use-package esh-autosuggest
	  :hook (eshell-mode . esh-autosuggest-mode))

	(use-package eshell-toggle
	  :straight (eshell-toggle :type git :host github :repo "4DA/eshell-toggle")
	  :init
	  (setq eshell-toggle-size-fraction 4)
	  (setq eshell-toggle-use-projectile-root t)
	  (setq eshell-toggle-run-command nil))

	(use-package eshell-up) ;; TODO eshell-up

	;; (use-package eshell-info-banner
	;;   :straight (eshell-info-banner :type git :host github
	;; 								:repo "phundrak/eshell-info-banner.el")
	;;   :hook (eshell-banner-load . eshell-info-banner-update-banner))

	(use-package eshell-manual
	  :straight (eshell-manual :type git :host github
							   :repo "nicferrier/eshell-manual"))

	;; (use-package eshell-fringe-status
	;;   :init
	;;   (setq eshell-fringe-status-success-bitmap 'my-flycheck-fringe-indicator)
	;;   (setq eshell-fringe-status-failure-bitmap 'my-flycheck-fringe-indicator)
	;;   :hook (eshell-mode . eshell-fringe-status-mode))

	;; (use-package esh-help
	;;   :init (setup-esh-help-eldoc))

  #+end_src

  #+RESULTS:

* LSP
~lsp-mode~ enables us to get Intellisense-esque features in Emacs: setting it up requires both config on Emacs' side and installing actual language servers on your side. We'll auto-install them with the magic of ~use-package-ensure-system-package~, although brace yourself for the potential for lots of debugging if the server doesn't work as expected on your system.

~lsp-mode~ can do more than just provide good completions: you can jump to definitions and references with ~lsp-find-definition~ and ~lsp-find-references~ respectively, as well as most other things you'd expect from an IDE.

#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure-system-package ccls
    :ensure-system-package (pyls . "python -m pip install pyls")
    :ensure-system-package rust-analyzer
    :init
    ;; Disable annoying headerline
    (setq lsp-headerline-breadcrumb-enable nil)
    ;; Don't show unneeded function info in completions
    (setq lsp-completion-show-detail nil)
    ;; Disable annoying autoformatting!
    (setq-default lsp-enable-indentation nil)
    (setq-default lsp-enable-on-type-formatting nil)
    :commands lsp
    ;; Add languages of your choice!
    :hook ((c-mode . lsp)
           (c++-mode . lsp)
           (python-mode . lsp)
           (typescript-mode . lsp)
           (rust-mode . lsp)))

  (use-package lsp-ui
    :after lsp
    :init
    (setq lsp-ui-doc-delay 5)
    (add-hook 'flycheck-mode-hook 'lsp-ui-mode) ;; HACK
    :config
    ;; HACK Hardcoded values are bad.
    (set-face-attribute 'lsp-ui-doc-background nil :background "#0b0f16"))
#+end_src

* Company
~company-mode~ provides code completions in Emacs, and will work together with ~lsp-mode~ to provide a nice experience. On top of that, let's use add-ons that allow documentation for completions to pop up and also let ~prescient~ make things better like it did with Ivy.

#+begin_src emacs-lisp
  (use-package company
    :init
    (setq company-idle-delay 0)
    (setq company-tooltip-maximum-width 40)
    :hook
    (prog-mode . company-mode))

  (use-package company-quickhelp
    :after company
    :init (company-quickhelp-mode))

  (use-package company-quickhelp-terminal
    :after company-quickhelp)

  (use-package company-prescient
    :after company prescient
    :init
    (setq-default history-length 1000)
    (setq-default prescient-history-length 1000)
    :init (company-prescient-mode))
#+end_src

* TODO Compilation
* TODO Documentation
* TODO Projectile?
* Linting
Next, we can add linting to the editor with flycheck!
#+begin_src emacs-lisp
  (use-package flycheck
    :hook
    (prog-mode . flycheck-mode)
    (flycheck-mode . (lambda () (set-window-fringes nil 15 0))))
#+end_src

With a tweak courtesy of [[https://github.com/jemoka/][@jemoka]], we can smooth over bits of the interface. Goodbye squiggly lines and strange fringe indicators. Goodbye linter errors while typing.
#+begin_src emacs-lisp
  (use-package flycheck
    :config
    (setq flycheck-check-syntax-automatically '(mode-enabled save))

    ;; HACK Hardcoded values are bad!
    (set-face-attribute 'flycheck-error nil :underline '(:color "#C62D43"))
    (set-face-attribute 'flycheck-warning nil :underline '(:color "#F98859"))
    (set-face-attribute 'flycheck-info nil :underline t)
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00011100
	      #b00111110
	      #b00111110
	      #b00111110
	      #b00011100
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000))
    (let ((bitmap 'my-flycheck-fringe-indicator))
      (flycheck-define-error-level 'error
	:severity 2
	:overlay-category 'flycheck-error-overlay
	:fringe-bitmap bitmap
	:error-list-face 'flycheck-error-list-error
	:fringe-face 'flycheck-fringe-error)
      (flycheck-define-error-level 'warning
	:severity 1
	:overlay-category 'flycheck-warning-overlay
	:fringe-bitmap bitmap
	:error-list-face 'flycheck-error-list-warning
	:fringe-face 'flycheck-fringe-warning)
      (flycheck-define-error-level 'info
	:severity 0
	:overlay-category 'flycheck-info-overlay
	:fringe-bitmap bitmap
	:error-list-face 'flycheck-error-list-info
	:fringe-face 'flycheck-fringe-info)))
#+end_src
#+end_collapsible

* Snippets
YASnippet is the premiere package for snippets, so let's install it.

#+begin_src emacs-lisp
  (use-package yasnippet
    :init (yas-global-mode))
#+end_src

~auto-activating-snippets~ provides the very useful ability to automatically expand snippets while typing.
#+begin_src emacs-lisp
(use-package aas
  :hook (LaTeX-mode . ass-activate-for-major-mode)
  :hook (org-mode . ass-activate-for-major-mode)
  :hook (c-mode . ass-activate-for-major-mode)
  :hook (c++-mode . ass-activate-for-major-mode)
  :config
  (aas-set-snippets 'c-mode
                    "u64" "uint64_t"
                    "u32" "uint32_t"
                    "u16" "uint16_t"
                    "u8" "uint8_t"
                    "i64" "int64_t"
                    "i32" "int32_t"
                    "i16" "int16_t"
                    "i8" "int8_t"
                    "sz" "size_t")
  (aas-set-snippets 'c++-mode
                    "mxf" "Eigen::MatrixXf"
                    "mxd" "Eigen::MatrixXd"
                    "v2f" "Eigen::Vector2f"
                    "v2d" "Eigen::Vector2d"
                    "v2i" "Eigen::Vector2i"
                    "v3f" "Eigen::Vector3f"
                    "v3d" "Eigen::Vector3d"
                    "v3i" "Eigen::Vector3i"))
#+end_src
* Git
Let's install the wonderful git porcelain Magit and some extra usefulness.

#+begin_src emacs-lisp
  ;; The ultimate Git porcelain.
  (use-package magit)
  ;; Show all TODOs in a git repo
  (use-package magit-todos)
  ;; Edit gitignores w/ highlighting
  (use-package gitignore-mode)
#+end_src

* TODO C++
  #+begin_src emacs-lisp

(setq c-default-style "k&r")
(setq-default c-basic-offset 4)

(use-package modern-cpp-font-lock
  :init (modern-c++-font-lock-global-mode t))

(use-package cmake-mode)

(use-package cuda-mode)

(use-package ccls
  :ensure-system-package ccls
  :hook ((c-mode c++-mode cuda-mode) .
		 (lambda () (require 'ccls) (lsp)))
  :custom
  (ccls-executable (executable-find "ccls")) ; Add ccls to path if you haven't done so
  (ccls-sem-highlight-method 'font-lock)
  (ccls-enable-skipped-ranges nil)
  :config
  (lsp-register-client
   (make-lsp-client
	:new-connection (lsp-tramp-connection (cons ccls-executable ccls-args))
	:major-modes '(c-mode c++-mode cuda-mode)
	:server-id 'ccls-remote
	:multi-root nil
	:remote? t
	:notification-handlers
	(lsp-ht ("$ccls/publishSkippedRanges" #'ccls--publish-skipped-ranges)
			("$ccls/publishSemanticHighlight" #'ccls--publish-semantic-highlight))
	:initialization-options (lambda () ccls-initialization-options)
	:library-folders-fn nil)))

;; TODO bind/investigate ccls functions

(use-package cpp-auto-include)  

  #+end_src
* TODO Python
  #+begin_src emacs-lisp
(use-package ein)

(use-package lsp-mode
  :config
  (lsp-register-custom-settings
   '(("pyls.plugins.pyls_mypy.enabled" t t)
     ("pyls.plugins.pyls_mypy.live_mode" nil t)
     ("pyls.plugins.pyls_black.enabled" t t)
     ("pyls.plugins.pyls_isort.enabled" t t)
	 ("pyls.plugins.flake8.enabled" t t)))

  (setq lsp-eldoc-enable-hover nil)
  
  :hook
  ((python-mode . lsp)))


(use-package buftra
  :straight (:host github :repo "humitos/buftra.el"))

(use-package py-pyment
    :straight (:host github :repo "humitos/py-cmd-buffer.el")
    :config
    (setq py-pyment-options '("--output=google")))

(use-package py-isort
    :straight (:host github :repo "humitos/py-cmd-buffer.el")
    :hook (python-mode . py-isort-enable-on-save)
    :config
    (setq py-isort-options '("-m=3" "-tc" "-fgw=0" "-ca")))

(use-package py-autoflake
    :straight (:host github :repo "humitos/py-cmd-buffer.el")
    :hook (python-mode . py-autoflake-enable-on-save)
    :config
    (setq py-autoflake-options '("--expand-star-imports")))

(use-package py-docformatter
    :straight (:host github :repo "humitos/py-cmd-buffer.el")
    :hook (python-mode . py-docformatter-enable-on-save)
    :config
    (setq py-docformatter-options '("--wrap-summaries=88" "--pre-summary-newline")))

(use-package blacken
    :straight t
    :hook (python-mode . blacken-mode)
    :config
    (setq blacken-line-length '100))

(use-package python-docstring
    :straight t
    :hook (python-mode . python-docstring-mode))
  #+end_src
* TODO Code Aesthetics
  #+begin_src emacs-lisp
    (use-package hl-todo
      :init
      (global-hl-todo-mode)
      ;; HACK Hardcoded values are bad!
      (setq hl-todo-keyword-faces
                    '(("TODO"   . "#F05644")
                      ("FIXME"  . "#C62D43")
                      ("DEBUG"  . "#F98859")
                      ("HACK"   . "#FD7446")
                      ("NOTE"   . "#F1BCA3")))
      ;; We already have todos in Org Mode!
      (add-hook 'org-mode-hook (lambda () (hl-todo-mode -1)))
      (set-face-attribute 'hl-todo nil :italic t)
      :bind (:map hl-todo-mode-map
      ("C-c t p" . hl-todo-previous)
      ("C-c t n" . hl-todo-next)
      ("C-c t i" . hl-todo-insert)))
  #+end_src

  #+begin_src emacs-lisp
    (use-package rainbow-mode)
  #+end_src
  
* TODO Writing
* TODO Vanilla++
  #+begin_src emacs-lisp
(use-package crux
  :bind
  (("C-a" . crux-move-beginning-of-line) ;; Move to beginning of text, not line.
   ("C-x 4 t" . crux-transpose-windows)
   ("C-x K" . crux-kill-other-buffers)
   ("C-k" . crux-smart-kill-line))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))

(use-package goto-line-preview
  :init (general-define-key "M-g M-g" 'goto-line-preview
							"C-x n g" 'goto-line-relative-preview))

(use-package all-the-icons-dired
  :hook (dired-mode . all-the-icons-dired-mode))

(use-package diredfl
  :init (diredfl-global-mode))
  #+end_src
* TODO Fun
  FIXME
  #+begin_src emacs-lisp
(use-package pdf-tools)
#+end_src

** TODO Exit Message
   #+begin_src emacs-lisp
     (setq exit-messages '(
	     "Please don't leave, there's more demons to toast!"
	     "Let's beat it -- This is turning into a bloodbath!"
	     "I wouldn't leave if I were you. Vim is much worse."
	     "Don't leave yet -- There's a demon around that corner!"
	     "Ya know, next time you come in here I'm gonna toast ya."
	     "Go ahead and leave. See if I care."
	     "Are you sure you want to quit this great editor?"
	     "Emacs will remember that."
	     "Emacs, Emacs never changes."
	     "Okay, look. We've both said a lot of things you're going to regret..."
	     "You are *not* prepared!"
	     "Look, bud. You leave now and you forfeit your body count!"
	     "Get outta here and go back to your boring editors."
	     "You're lucky I don't smack you for thinking about leaving."
	     "Don't go now, there's a dimensional shambler waiting at the prompt!"
	     "Just leave. When you come back I'll be waiting with a bat."
	     "Are you a bad enough dude to stay?"
	     "It was worth the risk... I assure you."
	     "I'm willing to take full responsibility for the horrible events of the last 24 hours."
	     ))

     (defun random-choice (items)
       (let* ((size (length items))
	      (index (random size)))
	     (nth index items)))

     (defun save-buffers-kill-emacs-with-confirm ()
       (interactive)
       (if (null current-prefix-arg)
	       (if (y-or-n-p (format "%s Quit? " (random-choice exit-messages)))
	     (save-buffers-kill-emacs))
	     (save-buffers-kill-emacs)))

     (global-set-key "\C-x\C-c" 'save-buffers-kill-emacs-with-confirm)
   #+end_src
** WAIT Spotify
Smudge is nice. 
#+begin_src emacs-lisp :tangle no
  (use-package smudge
    :straight (smudge :type git :host github :repo "danielfm/smudge"
                      :fork (:host github :repo "richardfeynmanrocks/smudge"))
    :init
    (setq smudge-status-location nil)
    ;; FIXME actively destructive to potential mode-line config!
    (setq global-mode-string '(("   ")))
    :bind
    ("C-S-s-l" . smudge-controller-next-track)
    ("C-S-s-h" . smudge-controller-previous-track)
    ("C-S-s-j" . smudge-controller-volume-down)
    ("C-S-s-k" . smudge-controller-volume-up) 	
    ("C-S-s-p" . smudge-controller-toggle-play)
    ("C-S-s-s" . smudge-controller-toggle-shuffle)
    ("C-S-s-r" . smudge-controller-toggle-repeat))  
#+end_src

* Scratch

* The End.
Well, that's it. We're done. Time to get going!
#+begin_src emacs-lisp :tangle (if (string-match-p (regexp-quote "DBUS") system-configuration-features) "yes" "no")
(require 'notifications)
(notifications-notify :title "Up and at 'em!"
                      :body (format "Loaded %d packages in %s with %d GCs."
         (length package-activated-list)
         (format "%.2f seconds"
                 (float-time
                  (time-subtract after-init-time before-init-time)))
         gcs-done))

#+end_src


